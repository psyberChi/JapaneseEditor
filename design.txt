= Japanese Vocabulary Editor =

== TODO ==

* Handle modified file properly
** Warning when opening new file when current modified.
** Warn when creating new file when current modified.
** Warn when closing application when there are modifications.
* Update lesson list when lesson value changed.
** While in lesson view, added vocabulary could get default "unknown/unsorted" category
* Add actions to menu items.
** Exit, Add/Delete Category, Add/Delete/Move Vocabulary.
** Recent files?
* VocabModel
** Make properties a array of properties so more can be added dynamically.
* Want to break out main GUI into more files somehow.
* Preferences
** Adjust font sizes for each field, and the list text.
*** Allow font size preference of vocab list based on display mode?
** Where will the preference file be saved to. ~/vocabeditor.prefs
* Log application to file accessible by user as need be.

= Hierarchy for programs =

Quiz
	-> KanaQuiz
	-> VocabQuiz

== Project directory layout ==

Japanese Projects/
	Quiz (project)
		QuizModel.java
	Utils/
		CustomLogger.java
	Japanese/
		JapaneseVocabEditor (project)
			VocabModel.java
		KanaQuiz (project)
		VocabQuiz (project)

== Keyboard Shortcuts ==

Open: Ctrl + O
Save: Ctrl + S
Save as: Ctrl + Shift + S
Close:
Exit:
Add Category: Ctrl + Shift + C
Remove Category:
Add Vocabulary: Ctrl + Shift + V
Remove Vocabulary: Ctrl + Shift + R
Move Vocabulary: Ctrl + M

= GUI =

{
	"top": {
		"splitpane": {
			"direction": "horizontal",
			"panes": [
				"categoryList": {
					"list": JList,
					"buttons": [
						"add": JButton,
						"remove": JButton
					]
				},
				"vocabList": {
					"list": JList,
					"buttons": [
						"add": JButton,
						"remove": JButton,
						"move": JButton
					]
				}
			]
		}
	},
	"editorRegion": {
		"layout": {
			"type": "box",
			"direction": "page"
		},
		"english": [
			"label": JLabel,
			"value": JTextField
		],
		"romaji": [
			"label": JLabel,
			"value": JTextField
		],
		"kana": [
			"label": JLabel,
			"value": JTextField
		],
		"kanji": [
			"label": JLabel,
			"value": JTextField
		],
		"lesson": [
			"label": JLabel,
			"value": JSpinner
		]
	},
	"statusBar": {
		"text": JLabel
	}
}

